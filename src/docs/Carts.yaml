paths:
  /api/carts/{cid}:
    get:
      summary: Returns the cart with the given mongo id.
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          schema:
            type: string
          required: true
          description: Mongo ID of the cart to get
      responses:
        "200": # status code
          description: A JSON object of the cart.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "400": # status code
          description: Invalid arguments, mongo id no valid.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "404": # status code
          description: Error, cart not found.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "500": # status code
          description: Internal server error.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
    delete:
      summary: Delete all products from the given cart.
      tags:
        - Carts
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: A JSON object of the cart with an empty products array inside.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "400": # status code
          description: Invalid arguments, mongo id no valid.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "401": # status code
          description: Unauthorized, must login to delete all products from cart.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "404": # status code
          description: Error, cart not found.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "500": # status code
          description: Internal server error.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
    put:
      summary: Update cart with the given mongo id.
      tags:
        - Carts
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: A JSON object of the updated cart.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "400": # status code
          description: Invalid arguments, or invalid mongo id, or invalid properties.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "401": # status code
          description: Unauthorized, must login to update cart.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "404": # status code
          description: Error, cart not found.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "500": # status code
          description: Internal server error.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
  /api/carts/{cid}/product/{pid}:
    post:
      summary: Add a product to the given cart.
      security:
        -OAuth2: [user, premium]
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          schema:
            type: string
          required: true
          description: Mongo ID of the cart
        - in: path
          name: pid
          schema:
            type: string
          required: true
          description: Mongo Id of the product
      description: Add products to a cart.Only users with "user" and "premium" roles can add products to cart, but users with a "premium" role cannot add their own products. Must login first.
      responses:
        "200":
          description: A JSON object of the created cart with 2 properties, a message and an object cart with an array of objects named products.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddProductResponse"
        "400":
          description: Invalid cart or product mongo id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please choose a valid mongo Id.
        "401":
          description: Unauthorized, must login to add products to a cart.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please login, or problem with the role.
        "404":
          description: Cart or product not found.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Could not find the selected cart.
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Could not find the selected product in cart.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
    delete:
      summary: Delete a product from the given cart.
      tags:
        - Carts
      description: Delete products from a cart, decreasing the quantity one by one. Must login first.
      responses:
        "200": # status code
          description: A JSON object of the cart with an array of products without the deleted product or with the updated quantity of the deleted product.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "400": # status code
          description: Invalid cart or product mongo id.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "401": # status code
          description: Unauthorized, must login to delete a product from the cart.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "404": # status code
          description: Cart or product not found.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "500": # status code
          description: Internal server error.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
  /api/carts/{cid}/products/{pid}:
    put:
      summary: Update product quantity of the given cart.
      tags:
        - Carts
      description: Update product quantity of the given cart. Must login first.
      responses:
        "200": # status code
          description: A JSON object of the cart with an array of products and the updatd quantity.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "400": # status code
          description: Invalid cart or product mongo id, or not a valid quantity.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "401": # status code
          description: Unauthorized, must login to update product quantity of a cart.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "404": # status code
          description: Cart or product not found.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "500": # status code
          description: Internal server error.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
  /api/carts/{cid}/purchase:
    post:
      summary: Create a purchase ticket.
      tags:
        - Carts
      description: Create a purchase ticket with products that have stock and send an email with the ticket to client. Products without stock remain in the cart. Must login first.
      responses:
        "200": # status code
          description: A JSON object of the created cart.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "400": # status code
          description: Invalid cart mongo id.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "401": # status code
          description: Unauthorized, must login to purchase.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "404": # status code
          description: Cart or product not found.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "500": # status code
          description: Internal server error.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
  /api/carts:
    post:
      summary: Create a cart at Mongo DB.
      tags:
        - Carts
      description: Create a cart at Mongo DB.Only users with "user" and "premium" roles can create a cart. Must login first.
      responses:
        "200": # status code
          description: A JSON object of the created cart.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
        "500": # status code
          description: Internal server error.
          # content:
          #   application/json:
          #     schema:
          #       type: array
          #       items:
          #         type: string
components:
  schemas:
    AddProductResponse:
      type: object
      properties:
        message:
          type: string
          example: Product added.
        cart:
          type: object
          properties:
            _id:
              type: string
              example: 665cc3d4c6d44e8003d48052
            products:
              type: array
              items:
                type: object
                properties:
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 662c37bcb8c5a4462d6c586f
                      title:
                        type: string
                        example: karajishi
                      description:
                        type: string
                        example: Original Painting A3 Size
                      price:
                        type: number
                        example: 230
                      thumbnail:
                        type: string
                        example: https://i.postimg.cc/dQCLz41h/karajishi.jpg
                      code:
                        type: string
                        example: horisada6
                      stock:
                        type: number
                        example: 3
                      status:
                        type: boolean
                        example: true
                      category:
                        type: string
                        example: folklore
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-04-26T23:24:44.393Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-07-24T19:28:29.103Z"
                      __v:
                        type: number
                        example: 0
                      owner:
                        type: string
                        example: adminCoder@coder.com
                  quantity:
                    type: number
                    example: 2
                  _id:
                    type: string
                    example: 66a5495e2b6d976435d5ab81
            createdAt:
              type: string
              format: date-time
              example: "2024-06-02T19:11:16.718Z"
            updatedAt:
              type: string
              format: date-time
              example: "2024-07-31T19:38:28.290Z"
            __v:
              type: number
              example: 48
