paths:
  /api/products:
    get:
      summary: Returns a list of products.
      tags:
        - Products
      parameters:
        - in: query
          name: page
          schema:
            type: number
          description: number of pages to show
        - in: query
          name: limit
          schema:
            type: number
          description: number of products to show
        - in: query
          name: sort
          schema:
            type: string
          description: sort by price asc/desc
        - in: query
          name: title
          schema:
            type: string
          description: Filter by product title
        - in: query
          name: description
          schema:
            type: string
          description: Filter by product description
        - in: query
          name: price
          schema:
            type: number
          description: Filter by product price
        - in: query
          name: thumbnail
          schema:
            type: string
          description: Filter by product thumbnail
        - in: query
          name: code
          schema:
            type: string
          description: Filter by product code
        - in: query
          name: stock
          schema:
            type: number
          description: Filter by product stock
        - in: query
          name: status
          schema:
            type: boolean
          description: Filter by product status
        - in: query
          name: category
          schema:
            type: string
          description: Filter by product category
      description: Retrieves a list of products from the database. The response includes product details and pagination information.
      responses:
        "200":
          description: A JSON object of products and pagination details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductsResponse"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error.
    post:
      summary: Add a product to Mongo DB.
      security:
        -OAuth2: [admin, premium]
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductBody"
      description: Add a product to the database. Only premium users and admin can perform this action.
      responses:
        "200":
          description: A JSON object with the new product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadProductResponse"
        "400":
          description: Invalid arguments, because code already exists or a property is missing.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Product with the chosen code already exists.
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Must complete all valid properties to add product. Valid properties are - title, description, category, price, status, thumbnail, code, stock.
        "401":
          description: Unauthorized, must login to add products.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please login, or problem with the role.
        "403":
          description: Unauthorised, only admin and premium users can add products to the DB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorised. Insufficient privileges to access.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
  /api/products/{pid}:
    get:
      summary: Returns the product with the given id.
      tags:
        - Products
      parameters:
        - in: path
          name: pid
          schema:
            type: string
          required: true
          description: Mongo ID of the product to get.
      description: Retrieves a product from the database.
      responses:
        "200":
          description: A JSON object ot the product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProductResponse"
        "400":
          description: Invalid product id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please choose a valid mongo Id.
        "404":
          description: Error, product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Could not find the selected product.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error.
    put:
      summary: Update a product at Mongo DB.
      security:
        -OAuth2: [admin, premium]
      tags:
        - Products
      parameters:
        - in: path
          name: pid
          schema:
            type: string
          required: true
          description: Mongo ID of the product to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductRequestBody"
              description: property to be updated
      description: Updated properties of a product. Only premium users and admin can perform this action.
      responses:
        "200":
          description: A JSON object of the updated product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProductResponse"
        "400":
          description: Invalid arguments, either because the Mongo ID is invalid, the code already exists, or the user must enter at least one valid property.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        example: Please choose a valid Mongo Id.
                  - type: object
                    properties:
                      error:
                        type: string
                        example: "You must choose a valid property to update product.Valid properties are: title,description,category,price,status,thumbnail,code,stock, owner."
                  - type: object
                    properties:
                      error:
                        type: string
                        example: There is already another product with the same code.
        "401":
          description: Unauthorized, must login to update a product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please login, or problem with the role.
        "403":
          description: Unauthorised, only admin and premium users can update a product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorised. Insufficient privileges to access.
        "404":
          description: Error, product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Could not find the selected product.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error.
    delete:
      summary: delete a product from Mongo DB.
      security:
        -OAuth2: [admin, premium]
      tags:
        - Products
      parameters:
        - in: path
          name: pid
          schema:
            type: string
          required: true
          description: Mongo ID of the product to be deleted.
      description: Only premium users and admin can delete a product. They must login first.
      responses:
        "200":
          description: A message saying product with given id was deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product with id 66ac29748a150b8bc602f343 was deleted.
        "401":
          description: Unauthorized, only admin and premium users can delete a product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please login, or problem with the role.
        "403":
          description: Unauthorised, only admin and premium users can delete a product. Premium users can only delete their own products.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorised. Insufficient privileges to access.
        "404":
          description: Error, product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Could not find the selected product.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error.

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          description: mongo id is autogenerated
        title:
          type: string
          description: name of the product
        description:
          type: string
          description: product description
        price:
          type: number
          description: product price
        thumbnail:
          type: string
          description: product image
        code:
          type: string
          description: product code must be unique
        stock:
          type: number
          description: product stock
        status:
          type: boolean
          description: product status (available/not available)
        category:
          type: string
          description: product category
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        __v:
          type: number
        owner:
          type: string
          description: product owner
        id:
          type: string
      example:
        _id: "662c37bcb8c5a4462d6c586f"
        title: "karajishi"
        description: "Original Painting A3 Size"
        price: 230
        thumbnail: "https://i.postimg.cc/dQCLz41h/karajishi.jpg"
        code: "horisada6"
        stock: 3
        status: true
        category: "folklore"
        createdAt: "2024-04-26T23:24:44.393Z"
        updatedAt: "2024-07-24T19:28:29.103Z"
        __v: 0
        owner: "adminCoder@coder.com"
        id: "662c37bcb8c5a4462d6c586f"
    ProductsResponse:
      type: object
      properties:
        status:
          type: string
        payload:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        totalPages:
          type: number
        prevPage:
          type: string
          nullable: true
        nextPage:
          type: string
          nullable: true
        page:
          type: number
        hasPrevPage:
          type: boolean
        hasNextPage:
          type: boolean
        prevLink:
          type: string
          nullable: true
        nextLink:
          type: string
          nullable: true
      example:
        status: "success"
        payload:
          - _id: "662c37bcb8c5a4462d6c586f"
            title: "karajishi"
            description: "Original Painting A3 Size"
            price: 230
            thumbnail: "https://i.postimg.cc/dQCLz41h/karajishi.jpg"
            code: "horisada6"
            stock: 3
            status: true
            category: "folklore"
            createdAt: "2024-04-26T23:24:44.393Z"
            updatedAt: "2024-07-24T19:28:29.103Z"
            __v: 0
            owner: "adminCoder@coder.com"
            id: "662c37bcb8c5a4462d6c586f"
        totalPages: 1
        prevPage: null
        nextPage: null
        page: 1
        hasPrevPage: false
        hasNextPage: false
        prevLink: null
        nextLink: null
    ProductBody:
      type: object
      properties:
        title:
          type: string
          description: product name
        description:
          type: string
          description: product description
        price:
          type: number
          description: product price
        thumbnail:
          type: string
          description: product image
        code:
          type: string
          description: product code, must be unique
        stock:
          type: number
          description: product stock
        status:
          type: boolean
          description: product status (available/not available)
        category:
          type: string
          description: product category
      example:
        title: "karajishi"
        description: "Original Painting A3 Size"
        price: 230
        thumbnail: "https://i.postimg.cc/dQCLz41h/karajishi.jpg"
        code: "horisada6"
        stock: 3
        status: true
        category: "folklore"
    GetProductResponse:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
    UploadProductResponse:
      type: object
      properties:
        message:
          type: string
        newProduct:
          $ref: "#/components/schemas/Product"
      example:
        message: "Product added."
        newProduct:
          _id: "662c37bcb8c5a4462d6c586f"
          title: "karajishi"
          description: "Original Painting A3 Size"
          price: 230
          thumbnail: "https://i.postimg.cc/dQCLz41h/karajishi.jpg"
          code: "horisada6"
          stock: 3
          status: true
          category: "folklore"
          createdAt: "2024-04-26T23:24:44.393Z"
          updatedAt: "2024-07-24T19:28:29.103Z"
          __v: 0
          owner: "adminCoder@coder.com"
          id: "662c37bcb8c5a4462d6c586f"
    UpdateProductRequestBody:
      type: object
      properties:
        title:
          type: string
          description: Product title
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        thumbnail:
          type: string
          description: Product image URL
        code:
          type: string
          description: Product code, must be unique
        stock:
          type: number
          description: Product stock
        status:
          type: boolean
          description: Product status (available/not available)
        category:
          type: string
          description: Product category
      description: Properties to be updated
      example:
        stock: "New Stock Value"
    UpdateProductResponse:
      type: object
      properties:
        message:
          type: string
          example: "Product with id 662c37bcb8c5a4462d6c586f was updated."
        updatedProduct:
          $ref: "#/components/schemas/Product"
